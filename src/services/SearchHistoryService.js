const SearchHistory = require("../models/SearchHistoryModel");
const mongoose = require("mongoose");

class SearchHistoryService {
  // L∆∞u l·ªãch s·ª≠ t√¨m ki·∫øm m·ªõi
  async saveSearchHistory(userId, query) {
    try {
      console.log("üéØ SearchHistoryService - saveSearchHistory called:", {
        userId,
        query,
      });

      // Ki·ªÉm tra xem query ƒë√£ t·ªìn t·∫°i cho user n√†y ch∆∞a
      const existingSearch = await SearchHistory.findOne({
        userId,
        query: query.toLowerCase(),
      });

      console.log("üîç Existing search found:", existingSearch);

      if (existingSearch) {
        // C·∫≠p nh·∫≠t timestamp n·∫øu ƒë√£ t·ªìn t·∫°i
        console.log("üîÑ Updating existing search...");
        existingSearch.timestamp = new Date();
        const savedSearch = await existingSearch.save();
        console.log("‚úÖ Updated search saved:", savedSearch);
        return savedSearch;
      } else {
        // T·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
        console.log("üÜï Creating new search history...");
        const newSearchHistory = new SearchHistory({
          userId,
          query: query.toLowerCase(),
          timestamp: new Date(),
        });
        console.log("üìã New search object:", newSearchHistory);

        const savedSearch = await newSearchHistory.save();
        console.log("‚úÖ New search saved to DB:", savedSearch);
        return savedSearch;
      }
    } catch (error) {
      console.error("‚ùå SearchHistoryService error:", error);
      throw new Error(`Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ t√¨m ki·∫øm: ${error.message}`);
    }
  }

  // L·∫•y l·ªãch s·ª≠ t√¨m ki·∫øm c·ªßa user
  async getSearchHistory(userId, limit = 10) {
    try {
      const searchHistory = await SearchHistory.find({ userId })
        .sort({ timestamp: -1 }) // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
        .limit(limit)
        .select("query timestamp");

      return searchHistory;
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ t√¨m ki·∫øm: ${error.message}`);
    }
  }

  // X√≥a m·ªôt m·ª•c l·ªãch s·ª≠ t√¨m ki·∫øm
  async deleteSearchHistory(userId, searchHistoryId) {
    try {
      const deletedHistory = await SearchHistory.findOneAndDelete({
        _id: searchHistoryId,
        userId, // ƒê·∫£m b·∫£o ch·ªâ user s·ªü h·ªØu m·ªõi c√≥ th·ªÉ x√≥a
      });

      if (!deletedHistory) {
        throw new Error(
          "Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ t√¨m ki·∫øm ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a"
        );
      }

      return deletedHistory;
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠ t√¨m ki·∫øm: ${error.message}`);
    }
  }

  // X√≥a to√†n b·ªô l·ªãch s·ª≠ t√¨m ki·∫øm c·ªßa user
  async clearAllSearchHistory(userId) {
    try {
      const result = await SearchHistory.deleteMany({ userId });
      return {
        success: true,
        deletedCount: result.deletedCount,
        message: `ƒê√£ x√≥a ${result.deletedCount} m·ª•c l·ªãch s·ª≠ t√¨m ki·∫øm`,
      };
    } catch (error) {
      throw new Error(
        `Kh√¥ng th·ªÉ x√≥a t·∫•t c·∫£ l·ªãch s·ª≠ t√¨m ki·∫øm: ${error.message}`
      );
    }
  }

  // L·∫•y c√°c t·ª´ kh√≥a t√¨m ki·∫øm ph·ªï bi·∫øn
  async getPopularSearches(limit = 5) {
    try {
      const popularSearches = await SearchHistory.aggregate([
        {
          $group: {
            _id: "$query",
            count: { $sum: 1 },
            lastUsed: { $max: "$timestamp" },
          },
        },
        {
          $sort: { count: -1, lastUsed: -1 },
        },
        {
          $limit: limit,
        },
        {
          $project: {
            query: "$_id",
            count: 1,
            lastUsed: 1,
            _id: 0,
          },
        },
      ]);

      return popularSearches;
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y t·ª´ kh√≥a ph·ªï bi·∫øn: ${error.message}`);
    }
  }

  // T√¨m ki·∫øm g·ª£i √Ω d·ª±a tr√™n l·ªãch s·ª≠
  async getSearchSuggestions(userId, partialQuery, limit = 5) {
    try {
      const suggestions = await SearchHistory.find({
        userId,
        query: { $regex: partialQuery.toLowerCase(), $options: "i" },
      })
        .sort({ timestamp: -1 })
        .limit(limit)
        .select("query")
        .distinct("query");

      return suggestions;
    } catch (error) {
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y g·ª£i √Ω t√¨m ki·∫øm: ${error.message}`);
    }
  }
}

module.exports = new SearchHistoryService();
