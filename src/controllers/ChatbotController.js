const Product = require('../models/ProductModel');
const User = require('../models/UserModel');
const axios = require('axios');

class ChatbotController {
  async processQuery(req, res) {
    try {
      const { query, userId } = req.body;

      if (!query) {
        return res.status(400).json({
          status: 'ERR',
          message: 'Vui l√≤ng cung c·∫•p n·ªôi dung truy v·∫•n'
        });
      }

      const API_KEY = process.env.GEMINI_API_KEY || 'AIzaSy...';
      const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

      // üîç L·∫•y danh s√°ch s·∫£n ph·∫©m
      const products = await Product.find({}).lean();

      // üßæ T·∫°o m√¥ t·∫£ s·∫£n ph·∫©m ƒë·∫πp m·∫Øt
      const ProductDescriptions = products.map((p, index) => {
        return `üî∏ ${p.productName}
  - K√≠ch th∆∞·ªõc: ${p.productSize}
  - Gi√°: ${p.productPrice.toLocaleString()}ƒë
  - Th√†nh ph·∫ßn: ${p.productDescriptions?.join(', ') || 'Kh√¥ng r√µ'}
  - Ph√¢n lo·∫°i: ${p.productType || 'Ch∆∞a r√µ'}
`;
      }).join('\n');

      // üß† Prompt ƒë·∫ßy ƒë·ªß
      const prompt = `
B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán c·ªßa ti·ªám b√°nh AVOCADO. D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c s·∫£n ph·∫©m hi·ªán c√≥:

${ProductDescriptions}

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. T∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p theo nhu c·∫ßu kh√°ch h√†ng (lo·∫°i b√°nh, d·ªãp s·ª≠ d·ª•ng, gi√° c·∫£)
2. Gi·∫£i th√≠ch r√µ th√¥ng tin nh∆∞: th√†nh ph·∫ßn, gi√°, k√≠ch th∆∞·ªõc, d·ªãp ph√π h·ª£p
3. Lu√¥n tr·∫£ l·ªùi ng·∫Øn g·ªçn, l·ªãch s·ª±, b·∫±ng ti·∫øng Vi·ªát
4. N·∫øu kh√°ch h·ªèi ngo√†i danh s√°ch, h√£y n√≥i "Th√¥ng tin n√†y hi·ªán kh√¥ng c√≥, b·∫°n c√≥ th·ªÉ truy c·∫≠p website ƒë·ªÉ bi·∫øt th√™m."
5. M·ªôt s·ªë t·ª´ vi·∫øt t·∫Øt: 100k l√† 100.000ƒë, khi tr·∫£ v·ªÅ ph·∫£i tr·∫£ v·ªÅ 100.000ƒë
C√¢u h·ªèi c·ªßa kh√°ch h√†ng: "${query}"
`;

      const apiRequest = {
        contents: [
          {
            parts: [{ text: prompt }]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 800,
        }
      };

      const response = await axios.post(API_URL, apiRequest, {
        headers: { 'Content-Type': 'application/json' }
      });

      let responseText = '';
      if (
        response.data?.candidates?.[0]?.content?.parts?.[0]?.text
      ) {
        responseText = response.data.candidates[0].content.parts[0].text;
      } else {
        throw new Error('Kh√¥ng t√¨m th·∫•y n·ªôi dung ph·∫£n h·ªìi t·ª´ API');
      }

      return res.status(200).json({
        status: 'OK',
        message: responseText,
        data: null
      });

    } catch (error) {
      console.error('Error in chatbot processing:', error);
      return res.status(500).json({
        status: 'ERR',
        message: 'Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.'
      });
    }
  }

  // Gi·ªØ nguy√™n ph·∫ßn getDetailsProduct n·∫øu kh√¥ng c√≥ thay ƒë·ªïi
  async getDetailsProduct(req, res) {
    try {
      const { productId } = req.params;
      if (!productId) {
        return res.status(400).json({
          status: 'ERR',
          message: 'Vui l√≤ng cung c·∫•p ID s·∫£n ph·∫©m'
        });
      }

      const product = await Product.findById(productId);
      if (!product) {
        return res.status(404).json({
          status: 'ERR',
          message: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p'
        });
      }

      return res.status(200).json({
        status: 'OK',
        data: product
      });

    } catch (error) {
      console.error('Error getting product details:', error);
      return res.status(500).json({
        status: 'ERR',
        message: 'Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m.'
      });
    }
  }
}

module.exports = new ChatbotController();
